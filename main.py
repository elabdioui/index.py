import streamlit as st
import networkx as nx
import matplotlib.pyplot as plt
from graphviz import Digraph  # Pour g√©n√©rer une s√©quence d'images (sch√©ma dynamique)

# Fonction pour cr√©er le graphe complexe repr√©sentant le flux de patients
def create_problem_graph():
    G = nx.DiGraph()

    # Ajout des n≈ìuds et arcs avec capacit√©s (flux possibles)
    G.add_edge("Admission", "Consultation G√©n√©rale", capacity=70)
    G.add_edge("Consultation G√©n√©rale", "Radiologie", capacity=40)
    G.add_edge("Consultation G√©n√©rale", "Laboratoire", capacity=50)
    G.add_edge("Radiologie", "Traitement Radiologique", capacity=30)
    G.add_edge("Laboratoire", "Consultation Sp√©cialiste", capacity=35)
    G.add_edge("Consultation Sp√©cialiste", "Traitement M√©dical", capacity=45)
    G.add_edge("Traitement Radiologique", "Sortie", capacity=20)
    G.add_edge("Traitement M√©dical", "Sortie", capacity=50)

    return G

# Fonction pour dessiner un graphe avec des styles am√©lior√©s
def draw_graph(G, title=""):
    plt.figure(figsize=(14, 12))
    pos = nx.spring_layout(G, seed=42)  # Position fixe pour coh√©rence
    capacities = nx.get_edge_attributes(G, 'capacity')
    nx.draw(
        G, pos, with_labels=True, node_size=3000, node_color='#4CAF50',
        font_size=8, font_weight='bold', font_color="white"
    )
    nx.draw_networkx_edge_labels(G, pos, edge_labels=capacities, font_color="#ff5722", font_size=9)
    plt.title(title, fontsize=16, color="#333333", fontweight="bold")
    st.pyplot(plt)

def generate_sequence_diagram():
    from graphviz import Digraph  # Import ici si non global

    dot = Digraph(format='png', engine='dot')
    dot.attr(rankdir='LR', size='35' ,dpi="500")  # Augmenter la taille du diagramme

    # Ajouter des n≈ìuds avec descriptions
    dot.node("Admission", "Admission\n(Entr√©e des patients)", width="2", height="1")
    dot.node("Consultation G√©n√©rale", "Consultation G√©n√©rale\n(M√©decin g√©n√©raliste)", width="2.5", height="1")
    dot.node("Radiologie", "Radiologie\n(Examens d'imagerie)", width="2", height="1")
    dot.node("Laboratoire", "Laboratoire\n(Analyses biologiques)", width="2", height="1")
    dot.node("Consultation Sp√©cialiste", "Consultation Sp√©cialiste\n(Expertise sp√©cialis√©e)", width="2.5", height="1")
    dot.node("Traitement Radiologique", "Traitement Radiologique\n(Traitement cibl√©)", width="2.5", height="1")
    dot.node("Traitement M√©dical", "Traitement M√©dical\n(Suivi et soins)", width="2.5", height="1")
    dot.node("Sortie", "Sortie\n(Fin du parcours)", width="2", height="1")

    # Ajouter des arcs avec annotations
    dot.edge("Admission", "Consultation G√©n√©rale", label="70 patients/h")
    dot.edge("Consultation G√©n√©rale", "Radiologie", label="40 patients/h")
    dot.edge("Consultation G√©n√©rale", "Laboratoire", label="50 patients/h")
    dot.edge("Radiologie", "Traitement Radiologique", label="30 patients/h")
    dot.edge("Laboratoire", "Consultation Sp√©cialiste", label="35 patients/h")
    dot.edge("Consultation Sp√©cialiste", "Traitement M√©dical", label="45 patients/h")
    dot.edge("Traitement Radiologique", "Sortie", label="20 patients/h")
    dot.edge("Traitement M√©dical", "Sortie", label="50 patients/h")

    # G√©n√©rer et afficher l'image
    filepath = "sequence_diagram"
    dot.render(filepath, format='png', cleanup=True)
    st.image(f"{filepath}.png", caption="Sch√©ma explicatif du parcours patient", use_container_width=True)

# Fonction pour calculer et afficher le flot maximal
def generate_solution_graph(G):
    flow_value, flow_dict = nx.maximum_flow(G, "Admission", "Sortie")
    st.write(f"**Flot maximal calcul√© :** {flow_value} patients par heure")

    # Modifier les √©tiquettes d'arc pour montrer le flot r√©alis√©
    flow_labels = { (u, v): f"{flow}/{d['capacity']}" for u, v, d in G.edges(data=True)
                    if (flow := flow_dict[u][v]) > 0 }

    # Dessiner le graphe avec les flots
    plt.figure(figsize=(14, 12))
    pos = nx.spring_layout(G, seed=42)  # Position fixe pour coh√©rence
    nx.draw(
        G, pos, with_labels=True, node_size=3000, node_color='#1E88E5',
        font_size=8, font_weight='bold', font_color="white"
    )
    nx.draw_networkx_edge_labels(G, pos, edge_labels=flow_labels, font_color="green", font_size=10)
    plt.title("Solution optimis√©e (Flot maximal)", fontsize=16, color="#333333", fontweight="bold")
    st.pyplot(plt)

# Interface principale Streamlit
st.title("üîÑ Optimisation des flux de patients dans un h√¥pital")

# Navigation par √©tapes
st.sidebar.title("üìã Navigation")
steps = ["Introduction", "Cr√©ation du graphe", "Sch√©ma explicatif", "Calcul du flot maximal", "Analyse des r√©sultats"]
step = st.sidebar.radio("√âtapes", steps)

if step == "Introduction":
    st.header("√âtape 1 : Introduction")
    st.write("""
    ## **Contexte et probl√©matique**  
    Les h√¥pitaux jouent un r√¥le essentiel dans la prise en charge des patients, mais ils font souvent face √† des d√©fis majeurs li√©s aux temps d'attente prolong√©s. Ces d√©lais peuvent √™tre caus√©s par :  
    - Une mauvaise organisation des parcours des patients.  
    - Des ressources limit√©es, comme un nombre insuffisant de m√©decins ou de salles.  
    - Une demande croissante de soins, d√©passant les capacit√©s disponibles.  

    Ces probl√®mes entra√Ænent non seulement une exp√©rience frustrante pour les patients, mais aussi une surcharge pour le personnel m√©dical.  

    ## **Objectif du projet**  
    L'objectif principal de ce projet est d'optimiser le flux des patients √† travers diff√©rentes √©tapes de leur parcours √† l'h√¥pital, en utilisant des outils et algorithmes issus de la recherche op√©rationnelle. Cela permettra de :  
    - **R√©duire les temps d'attente** : Identifier et supprimer les goulets d'√©tranglement.  
    - **Maximiser le nombre de patients trait√©s** : Assurer une meilleure utilisation des ressources.  
    - **Am√©liorer la qualit√© des soins** : Permettre au personnel de se concentrer sur les traitements.  

    ## **Comment allons-nous proc√©der ?**  
    Ce projet mod√©lisera le parcours des patients comme un graphe o√π :  
    - Les **n≈ìuds** repr√©sentent les √©tapes du parcours patient (par exemple, admission, radiologie, traitement).  
    - Les **arcs** repr√©sentent les connexions entre ces √©tapes avec une capacit√© maximale (nombre de patients pouvant transiter par heure).  

    Un algorithme de recherche op√©rationnelle, tel que **l'algorithme de flot maximal**, sera appliqu√© pour optimiser ce flux, tout en respectant les contraintes des ressources disponibles.  

    ## **Exemple concret :**  
    Prenons l'exemple d'un patient arrivant √† l'h√¥pital :  
    1. Il commence par **l'admission**, o√π ses informations sont enregistr√©es.  
    2. Ensuite, il passe par une **consultation g√©n√©rale**, o√π un m√©decin √©value son √©tat.  
    3. Selon ses besoins, il peut √™tre dirig√© vers :  
        - **Radiologie** pour un examen d'imagerie, ou  
        - **Laboratoire** pour une analyse biologique.  
    4. Apr√®s les examens, il peut avoir une **consultation sp√©cialis√©e** ou directement un traitement.  
    5. Une fois le traitement termin√©, il quitte l'h√¥pital.  

    Ce parcours, bien qu'apparemment simple, peut devenir un v√©ritable casse-t√™te en cas de surcharge. Notre projet vise √† r√©soudre ce probl√®me pour rendre le syst√®me plus fluide et efficace.  
    """)

# √âtape 2 : Cr√©ation du graphe
elif step == "Cr√©ation du graphe":
    st.header("√âtape 2 : Cr√©ation du graphe")
    st.write("""
    ## **Cr√©ation du graphe repr√©sentant le parcours patient**  
    Pour mieux comprendre et optimiser le parcours des patients dans un h√¥pital, nous avons mod√©lis√© ce processus sous forme d‚Äôun graphe.  

    ### **Qu‚Äôest-ce qu‚Äôun graphe ?**  
    Un graphe est un ensemble de **n≈ìuds** (ou sommets) reli√©s par des **arcs** (ou liens). Dans notre cas :  
    - **Les n≈ìuds** repr√©sentent les diff√©rentes √©tapes que les patients suivent dans l‚Äôh√¥pital.  
    - **Les arcs** montrent comment les patients passent d‚Äôune √©tape √† l‚Äôautre, avec une capacit√© indiquant le nombre maximal de patients pouvant transiter par heure.  

    ### **Les √©tapes du parcours patient (n≈ìuds du graphe) :**  
    1. **Admission** :  
       L'√©tape d'entr√©e o√π les informations du patient sont collect√©es et son passage √† l‚Äô√©tape suivante est organis√©.  
    2. **Consultation G√©n√©rale** :  
       Une rencontre initiale avec un m√©decin g√©n√©raliste pour √©valuer l‚Äô√©tat du patient et d√©terminer les examens ou soins n√©cessaires.  
    3. **Radiologie** :  
       R√©alisation d‚Äôexamens d‚Äôimagerie m√©dicale (rayons X, IRM, scanners) pour aider √† diagnostiquer le probl√®me du patient.  
    4. **Laboratoire** :  
       Analyse d‚Äô√©chantillons biologiques (sang, urine, etc.) pour fournir des informations compl√©mentaires au diagnostic.  
    5. **Consultation Sp√©cialiste** :  
       Une rencontre avec un m√©decin sp√©cialiste qui examine les r√©sultats des analyses et propose des traitements sp√©cifiques.  
    6. **Traitement** :  
       Cette √©tape regroupe diff√©rents types de soins, comme des interventions m√©dicales, des traitements radiologiques ou d‚Äôautres suivis n√©cessaires.  
    7. **Sortie** :  
       L'√©tape finale o√π le patient quitte l‚Äôh√¥pital apr√®s avoir re√ßu les soins requis.  

    ### **Les transitions entre les √©tapes (arcs du graphe) :**  
    Les arcs repr√©sentent les connexions entre les √©tapes avec des capacit√©s maximales :  
    - Entre **Admission** et **Consultation G√©n√©rale**, un maximum de 70 patients par heure peut √™tre admis.  
    - Entre **Consultation G√©n√©rale** et les √©tapes d‚Äôexamen (**Radiologie** et **Laboratoire**), les capacit√©s sont respectivement de 40 et 50 patients par heure.  
    - Entre **Laboratoire** et **Consultation Sp√©cialiste**, la capacit√© est de 35 patients par heure.  
    - Entre les traitements (**Radiologique** ou **M√©dical**) et **Sortie**, la capacit√© varie entre 20 et 50 patients par heure.  

    Ce graphe nous permet de visualiser le flux des patients et d'identifier les goulets d'√©tranglement (par exemple, une √©tape o√π les capacit√©s sont insuffisantes).  
    """)

    # Cr√©ation et affichage du graphe
    G = create_problem_graph()
    draw_graph(G, title="Graphe repr√©sentant le parcours patient")


# √âtape 3 : Sch√©ma explicatif
elif step == "Sch√©ma explicatif":
    st.header("√âtape 3 : Sch√©ma explicatif")
    st.write("""
    ## **Sch√©ma explicatif : Visualisation du parcours patient**  

    Ce sch√©ma dynamique illustre le parcours des patients √† travers diff√©rentes √©tapes de l'h√¥pital. Il aide √† comprendre :  
    - **Les √©tapes principales** que les patients traversent.  
    - **Les connexions entre les √©tapes**, montrant comment les patients transitent d'une √©tape √† l'autre.  
    - **Les limites de capacit√©** des ressources, comme le nombre maximum de patients pouvant √™tre pris en charge par heure dans chaque √©tape.

    ### **D√©tail des √©tapes repr√©sent√©es dans le sch√©ma :**  
    1. **Admission :**  
       - C'est le point de d√©part o√π les patients sont enregistr√©s.  
       - Les informations sont collect√©es et les patients sont dirig√©s vers les √©tapes suivantes.  
    2. **Consultation G√©n√©rale :**  
       - Un m√©decin g√©n√©raliste √©value l‚Äô√©tat initial du patient.  
       - Le m√©decin d√©cide des examens ou traitements n√©cessaires, en orientant les patients vers la Radiologie ou le Laboratoire.  
    3. **Radiologie :**  
       - √âtape o√π les patients r√©alisent des examens d‚Äôimagerie (comme des scanners, IRM ou rayons X).  
    4. **Laboratoire :**  
       - Analyses biologiques comme des tests sanguins ou urinaires pour compl√©ter le diagnostic m√©dical.  
    5. **Consultation Sp√©cialiste :**  
       - Un m√©decin sp√©cialiste examine les r√©sultats des analyses et propose un plan de traitement adapt√©.  
    6. **Traitement :**  
       - Cette √©tape regroupe diff√©rents soins, tels que des traitements radiologiques ou m√©dicaux.  
    7. **Sortie :**  
       - Les patients quittent l‚Äôh√¥pital une fois tous les soins n√©cessaires r√©alis√©s.  

    ### **Pourquoi ce sch√©ma est important ?**  
    - Il donne une vue claire et structur√©e du parcours hospitalier.  
    - Il met en √©vidence les **goulets d‚Äô√©tranglement** potentiels o√π les capacit√©s peuvent √™tre d√©pass√©es (par exemple, Radiologie ou Traitement).  
    - Il sert de base pour optimiser les flux en identifiant les √©tapes critiques.  

    Regardez ci-dessous pour une illustration d√©taill√©e g√©n√©r√©e dynamiquement :  
    """)

    st.image("sequence_diagram.png", caption="Sch√©ma explicatif du parcours patient", width=900)

# √âtape 4 : Calcul du flot maximal
elif step == "Calcul du flot maximal":
    st.header("√âtape 4 : Calcul du flot maximal")
    st.write("""
    ## **Qu'est-ce que le flot maximal ?**  
    Le **flot maximal** est une m√©thode de recherche op√©rationnelle qui permet de d√©terminer la quantit√© maximale d'un flux (ici, les patients) qui peut traverser un syst√®me (le parcours hospitalier) tout en respectant les capacit√©s des ressources disponibles (m√©decins, salles, √©quipements).  

    ### **Pourquoi le calculer ?**  
    Le calcul du flot maximal nous aide √† :  
    - Identifier combien de patients peuvent √™tre pris en charge simultan√©ment √† travers toutes les √©tapes de l'h√¥pital.  
    - D√©tecter les √©tapes ou transitions o√π les ressources sont insuffisantes (goulets d'√©tranglement).  
    - Proposer des am√©liorations pour rendre le parcours plus efficace.  

    ### **Comment est-il calcul√© ?**  
    1. Nous utilisons un algorithme de **flot maximal**, qui suit les arcs du graphe (les connexions entre les √©tapes) et respecte leurs capacit√©s maximales.  
    2. Le flot est calcul√© entre un point d'entr√©e (**Admission**) et un point de sortie (**Sortie**).  
    3. Chaque arc indique combien de patients peuvent transiter √† un moment donn√©.  

    Voici le graphe mis √† jour avec le **flot maximal calcul√©** :  
    """)
    G = create_problem_graph()
    generate_solution_graph(G)

# √âtape 5 : Analyse des r√©sultats
elif step == "Analyse des r√©sultats":
    st.header("√âtape 5 : Analyse des r√©sultats")
    st.write("""
    ## **Analyse des r√©sultats obtenus**  

    Une fois le flot maximal calcul√©, nous pouvons analyser les donn√©es pour identifier les **points critiques** et proposer des am√©liorations.  

    ### **Les goulets d'√©tranglement**  
    Les goulets d‚Äô√©tranglement sont des √©tapes o√π les ressources disponibles sont insuffisantes pour g√©rer tous les patients qui transitent. Dans notre cas :  
    - **Radiologie** : L'√©tape est limit√©e √† 40 patients par heure, ce qui peut entra√Æner des retards.  
    - **Traitement Radiologique** : La capacit√© est limit√©e √† 30 patients par heure, ce qui peut freiner la progression des flux.  

    ### **Propositions d'am√©lioration**  
    Pour r√©soudre ces goulets d'√©tranglement et am√©liorer le syst√®me :  
    1. **Augmenter les ressources humaines** : Ajouter du personnel (m√©decins, techniciens, infirmiers) pour augmenter la capacit√© des √©tapes critiques.  
    2. **Augmenter les √©quipements** : Ajouter des machines (appareils de radiologie ou √©quipements de laboratoire) pour traiter plus de patients simultan√©ment.  
    3. **Optimiser les priorit√©s** : Mettre en place un syst√®me qui donne la priorit√© aux patients les plus urgents ou ceux n√©cessitant des soins critiques.  
    4. **R√©organiser les flux** :  
        - R√©duire les √©tapes inutiles pour certains patients.  
        - Diviser les flux pour √©viter que trop de patients passent par les m√™mes √©tapes (par exemple, r√©partir les patients entre plusieurs services).  

    ### **Conclusion**  
    En appliquant ces propositions, nous pouvons :  
    - **R√©duire significativement les temps d‚Äôattente.**  
    - **Maximiser l‚Äôefficacit√© des ressources disponibles.**  
    - **Am√©liorer la qualit√© des soins offerts aux patients.**  
    """)

